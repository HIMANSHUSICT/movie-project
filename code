Project: Investigate a Dataset (TMDb_Movies Dataset)
Table of Contents
Introduction
Data Wrangling
Exploratory Data Analysis
Conclusions

Introduction
Overview
To complete my Data Analysis project I am using TMDb movies dataset.

This data set contains information about 10 thousand movies collected from The Movie Database (TMDb), including user ratings and revenue. It consist of 21 columns such as imdb_id, revenue, budget, vote_count etc.

Question that can analyised from this data set
Movies which had most and least profit
Movies with largest and lowest budgets
Movies with most and least earned revenu.
Movies with longest and shortest runtime values
Average runtime of all the movies.
In which year we had most no.of profitable movies.
Successful genres (with respest to the profitable movies).
Most frequent cast (with respest to the profitable movies)
Average budget (with respest to the profitable movies)
Average revenue (with respest to the profitable movies)
Average duration of the movie (with respest to the profitable movies)
In [2]:
# Use this cell to set up import statements for all of the packages that you
#   plan to use.

# Remember to include a 'magic word' so that your visualizations are plotted
#   inline with the notebook. See this page for more:
#   http://ipython.readthedocs.io/en/stable/interactive/magics.html

#importing important files 
import pandas as pd
import numpy as np
import csv
from datetime import datetime
import matplotlib.pyplot as plt
% matplotlib inline

Data Wrangling
After observing the dataset and proposed questions for the analysis we will be keeping only relevent data deleting the unsued data so that we can make our calculation easy and understandable. .

General Properties
In [3]:
# Load your data and print out a few lines. Perform operations to inspect data
#   types and look for instances of missing or possibly errant data.

#loading the csv file and storing it in the variable "tmbd_data"
tmdb_data = pd.read_csv('tmdb-movies.csv')

#printing first five rows with defined columns of tmdb-movies database
tmdb_data.head()
Out[3]:
id	imdb_id	popularity	budget	revenue	original_title	cast	homepage	director	tagline	...	overview	runtime	genres	production_companies	release_date	vote_count	vote_average	release_year	budget_adj	revenue_adj
0	135397	tt0369610	32.985763	150000000	1513528810	Jurassic World	Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...	http://www.jurassicworld.com/	Colin Trevorrow	The park is open.	...	Twenty-two years after the events of Jurassic ...	124	Action|Adventure|Science Fiction|Thriller	Universal Studios|Amblin Entertainment|Legenda...	6/9/15	5562	6.5	2015	1.379999e+08	1.392446e+09
1	76341	tt1392190	28.419936	150000000	378436354	Mad Max: Fury Road	Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...	http://www.madmaxmovie.com/	George Miller	What a Lovely Day.	...	An apocalyptic story set in the furthest reach...	120	Action|Adventure|Science Fiction|Thriller	Village Roadshow Pictures|Kennedy Miller Produ...	5/13/15	6185	7.1	2015	1.379999e+08	3.481613e+08
2	262500	tt2908446	13.112507	110000000	295238201	Insurgent	Shailene Woodley|Theo James|Kate Winslet|Ansel...	http://www.thedivergentseries.movie/#insurgent	Robert Schwentke	One Choice Can Destroy You	...	Beatrice Prior must confront her inner demons ...	119	Adventure|Science Fiction|Thriller	Summit Entertainment|Mandeville Films|Red Wago...	3/18/15	2480	6.3	2015	1.012000e+08	2.716190e+08
3	140607	tt2488496	11.173104	200000000	2068178225	Star Wars: The Force Awakens	Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...	http://www.starwars.com/films/star-wars-episod...	J.J. Abrams	Every generation has a story.	...	Thirty years after defeating the Galactic Empi...	136	Action|Adventure|Science Fiction|Fantasy	Lucasfilm|Truenorth Productions|Bad Robot	12/15/15	5292	7.5	2015	1.839999e+08	1.902723e+09
4	168259	tt2820852	9.335014	190000000	1506249360	Furious 7	Vin Diesel|Paul Walker|Jason Statham|Michelle ...	http://www.furious7.com/	James Wan	Vengeance Hits Home	...	Deckard Shaw seeks revenge against Dominic Tor...	137	Action|Crime|Thriller	Universal Pictures|Original Film|Media Rights ...	4/1/15	2947	7.3	2015	1.747999e+08	1.385749e+09
5 rows Ã— 21 columns

Obsevations from the data set
1.) No unit of currency is mentioned in the dataset. So for my analysis I will take it as dollar as it is the most used international currency.

2.) vote_count is different for all the movies, so we cannot directly conculed the popularity of the movies based on the average vote count

Data Cleaning (Removing the unused information from the dataset )
Important observation regarding this process

We need to remove unused column such as id, imdb_id, vote_count, production_company, keywords, homepage etc.
Removing the duplicacy in the rows(if any).
Some movies in the database have zero budget or zero revenue, that is there value has not been recorded so we will be discarding such entries
Changing release date column into date format.
Replacing zero with NAN in runtime column.
Changing format of budget and revenue column.
1. Removing Unused columns

Columns that we need to delete are - id, imdb_id, popularity, budget_adj, revenue_adj, homepage, keywords, overview, production_companies, vote_count and vote_average.

In [4]:
#creating a list of columb to be deleted
del_col=[ 'id', 'imdb_id', 'popularity', 'budget_adj', 'revenue_adj', 'homepage', 'keywords', 'overview', 'production_companies', 'vote_count', 'vote_average']

#deleting the columns
tmdb_data= tmdb_data.drop(del_col,1)

#previewing the new dataset
tmdb_data.head(4)
Out[4]:
budget	revenue	original_title	cast	director	tagline	runtime	genres	release_date	release_year
0	150000000	1513528810	Jurassic World	Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...	Colin Trevorrow	The park is open.	124	Action|Adventure|Science Fiction|Thriller	6/9/15	2015
1	150000000	378436354	Mad Max: Fury Road	Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...	George Miller	What a Lovely Day.	120	Action|Adventure|Science Fiction|Thriller	5/13/15	2015
2	110000000	295238201	Insurgent	Shailene Woodley|Theo James|Kate Winslet|Ansel...	Robert Schwentke	One Choice Can Destroy You	119	Adventure|Science Fiction|Thriller	3/18/15	2015
3	200000000	2068178225	Star Wars: The Force Awakens	Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...	J.J. Abrams	Every generation has a story.	136	Action|Adventure|Science Fiction|Fantasy	12/15/15	2015
2. Removing the duplicacy in the rows(if any).

Lets see how many entries we have in the database

In [5]:
rows, col = tmdb_data.shape
#We need to reduce the count of row by one as contain header row also.
print('There are {} total entries of movies and {} no.of columns in it.'.format(rows-1, col))
There are 10865 total entries of movies and 10 no.of columns in it.
Now removing the duplicate rows if any!

In [6]:
tmdb_data.drop_duplicates(keep ='first', inplace=True)
rows, col = tmdb_data.shape

print('There are now {} total entries of movies and {} no.of columns in it.'.format(rows-1, col))
There are now 10864 total entries of movies and 10 no.of columns in it.
So there was a duplicate row and it has been removed now.

3. Removing 0's from budget and the revenue columns

In [7]:
# creating a seperate list of revenue and budget column
temp_list=['budget', 'revenue']

#this will replace all the value from '0' to NAN in the list
tmdb_data[temp_list] = tmdb_data[temp_list].replace(0, np.NAN)

#Removing all the row which has NaN value in temp_list 
tmdb_data.dropna(subset = temp_list, inplace = True)

rows, col = tmdb_data.shape
print('So after removing such entries, we now have only {} no.of movies.'.format(rows-1))
So after removing such entries, we now have only 3853 no.of movies.
4. Changing the release date column into standard date format

In [8]:
tmdb_data.release_date = pd.to_datetime(tmdb_data['release_date'])
In [9]:
# printing the changed dataset
tmdb_data.head(3)
Out[9]:
budget	revenue	original_title	cast	director	tagline	runtime	genres	release_date	release_year
0	150000000.0	1.513529e+09	Jurassic World	Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...	Colin Trevorrow	The park is open.	124	Action|Adventure|Science Fiction|Thriller	2015-06-09	2015
1	150000000.0	3.784364e+08	Mad Max: Fury Road	Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...	George Miller	What a Lovely Day.	120	Action|Adventure|Science Fiction|Thriller	2015-05-13	2015
2	110000000.0	2.952382e+08	Insurgent	Shailene Woodley|Theo James|Kate Winslet|Ansel...	Robert Schwentke	One Choice Can Destroy You	119	Adventure|Science Fiction|Thriller	2015-03-18	2015
5. Replacing zero with NAN in runtime column.

In [10]:
#replacing 0 with NaN of runtime column in the dataset
tmdb_data['runtime'] =tmdb_data['runtime'].replace(0, np.NAN)
6. Changing format of budget and revenue column.

Checking the current format of columns in the dataset

In [11]:
#printing the data type of the data set
tmdb_data.dtypes
Out[11]:
budget                   float64
revenue                  float64
original_title            object
cast                      object
director                  object
tagline                   object
runtime                    int64
genres                    object
release_date      datetime64[ns]
release_year               int64
dtype: object
In [12]:
change_type=['budget', 'revenue']
#changing data type
tmdb_data[change_type]=tmdb_data[change_type].applymap(np.int64)
#printing the changed information
tmdb_data.dtypes
Out[12]:
budget                     int64
revenue                    int64
original_title            object
cast                      object
director                  object
tagline                   object
runtime                    int64
genres                    object
release_date      datetime64[ns]
release_year               int64
dtype: object

Exploratory Data Analysis
1. Calculating the profit of the each movie

In [13]:
#insert function with three parameters(index of the column in the dataset, name of the column, value to be inserted)
tmdb_data.insert(2,'profit_earned',tmdb_data['revenue']-tmdb_data['budget'])

#previewing the changes in the dataset
tmdb_data.head(2)
Out[13]:
budget	revenue	profit_earned	original_title	cast	director	tagline	runtime	genres	release_date	release_year
0	150000000	1513528810	1363528810	Jurassic World	Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...	Colin Trevorrow	The park is open.	124	Action|Adventure|Science Fiction|Thriller	2015-06-09	2015
1	150000000	378436354	228436354	Mad Max: Fury Road	Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...	George Miller	What a Lovely Day.	120	Action|Adventure|Science Fiction|Thriller	2015-05-13	2015
Research Question 1 : Movies which had most and least profit
In [14]:
import pprint
#defining the function
def calculate(column):
    #for highest earned profit
    high= tmdb_data[column].idxmax()
    high_details=pd.DataFrame(tmdb_data.loc[high])
    
    #for lowest earned profit
    low= tmdb_data[column].idxmin()
    low_details=pd.DataFrame(tmdb_data.loc[low])
    
    #collectin data in one place
    info=pd.concat([high_details, low_details], axis=1)
    
    return info

#calling the function
calculate('profit_earned')
Out[14]:
1386	2244
budget	237000000	425000000
revenue	2781505847	11087569
profit_earned	2544505847	-413912431
original_title	Avatar	The Warrior's Way
cast	Sam Worthington|Zoe Saldana|Sigourney Weaver|S...	Kate Bosworth|Jang Dong-gun|Geoffrey Rush|Dann...
director	James Cameron	Sngmoo Lee
tagline	Enter the World of Pandora.	Assassin. Hero. Legend.
runtime	162	100
genres	Action|Adventure|Fantasy|Science Fiction	Adventure|Fantasy|Action|Western|Thriller
release_date	2009-12-10 00:00:00	2010-12-02 00:00:00
release_year	2009	2010
Column with id 1386 shows the highest earned profit i.e 2544505847 .

Whereas the column with id 2244 shows the lowest earned profit i.e -413912431

Research Question 2 : Movies with largest and lowest budgets
In [15]:
# we will call the same function **calculate(column)** again for this analysis
calculate('budget')
Out[15]:
2244	2618
budget	425000000	1
revenue	11087569	100
profit_earned	-413912431	99
original_title	The Warrior's Way	Lost & Found
cast	Kate Bosworth|Jang Dong-gun|Geoffrey Rush|Dann...	David Spade|Sophie Marceau|Ever Carradine|Step...
director	Sngmoo Lee	Jeff Pollack
tagline	Assassin. Hero. Legend.	A comedy about a guy who would do anything to ...
runtime	100	95
genres	Adventure|Fantasy|Action|Western|Thriller	Comedy|Romance
release_date	2010-12-02 00:00:00	1999-04-23 00:00:00
release_year	2010	1999
Column with id 2244 shows the largest budget i.e 425000000 dollar.

Whereas the column with id 2618 shows the smallest budget i.e 1 dollar

Research Question 3 : Movies with most and least earned revenue
In [16]:
# we will call the same function **calculate(column)** again for this analysis
calculate('revenue')
Out[16]:
1386	5067
budget	237000000	6000000
revenue	2781505847	2
profit_earned	2544505847	-5999998
original_title	Avatar	Shattered Glass
cast	Sam Worthington|Zoe Saldana|Sigourney Weaver|S...	Hayden Christensen|Peter Sarsgaard|ChloÃƒÂ« Sevi...
director	James Cameron	Billy Ray
tagline	Enter the World of Pandora.	NaN
runtime	162	94
genres	Action|Adventure|Fantasy|Science Fiction	Drama|History
release_date	2009-12-10 00:00:00	2003-11-14 00:00:00
release_year	2009	2003
Column with id 1386 shows the largest revenue earned i.e 2781505847 dollar.

Whereas the column with id 5067 shows the smallest revenue earned i.e 2 dollar

Research Question 4 : Movies with longest and shortest runtime
In [17]:
# we will call the same function **calculate(column)** again for this analysis
calculate('runtime')
Out[17]:
2107	5162
budget	18000000	10
revenue	871279	5
profit_earned	-17128721	-5
original_title	Carlos	Kid's Story
cast	Edgar RamÃƒÂ­rez|Alexander Scheer|Fadi Abi Samra...	Clayton Watson|Keanu Reeves|Carrie-Anne Moss|K...
director	Olivier Assayas	Shinichiro Watanabe
tagline	The man who hijacked the world	NaN
runtime	338	15
genres	Crime|Drama|Thriller|History	Science Fiction|Animation
release_date	2010-05-19 00:00:00	2003-06-02 00:00:00
release_year	2010	2003
Column with id 2107 shows the longest runtime i.e 338 minutes.

Whereas the column with id 5162 shows the shortest runtime i.e 15 minutes

Research Question 5 : Average runtime of the movies
In [18]:
# defining a function to find average of a column
def avg_fun(column):
    return tmdb_data[column].mean()
In [19]:
#calling above function
avg_fun('runtime')
Out[19]:
109.22029060716139
So the average runtime a movie is 109 minutes. Lets analyse it in a visual form i.e. by graphical approach.

In [20]:
#plotting a histogram of runtime of movies

#giving the figure size(width, height)
plt.figure(figsize=(9,5), dpi = 100)

#On x-axis 
plt.xlabel('Runtime of the Movies', fontsize = 15)
#On y-axis 
plt.ylabel('Nos.of Movies in the Dataset', fontsize=15)
#Name of the graph
plt.title('Runtime of all the movies', fontsize=15)

#giving a histogram plot
plt.hist(tmdb_data['runtime'], rwidth = 0.9, bins =35)
#displays the plot
plt.show()

The distribution of the above formed graph is positively skewed or right skewed! Most of the movies are timed between 80 to 115 minutes. Almost 1000 and more no.of movies fall in this criteria.

Lets analyse more about runtime of the movie using different kind of plots i.e Box Plot and Data Point Plot

In [23]:
import seaborn as sns
#The First plot is box plot of the runtime of the movies 
plt.figure(figsize=(9,7), dpi = 105)

#using seaborn to generate the boxplot
sns.boxplot(tmdb_data['runtime'], linewidth = 3)
#diplaying the plot
plt.show()
C:\Users\antra\Anaconda3\lib\site-packages\seaborn\categorical.py:462: FutureWarning: remove_na is deprecated and is a private function. Do not use.
  box_data = remove_na(group_data)

In [24]:
#The Second plots is the data points plot of runtime of movies

plt.figure(figsize=(10,5), dpi = 105)
#using seaborn to generate the plot
sns.swarmplot(tmdb_data['runtime'], color = 'green')
#displaying the plot
plt.show()

In [25]:
#getting specific runtime 
tmdb_data['runtime'].describe()
Out[25]:
count    3854.000000
mean      109.220291
std        19.922820
min        15.000000
25%        95.000000
50%       106.000000
75%       119.000000
max       338.000000
Name: runtime, dtype: float64
Thats amazing!! The plot generated above give a visual of complete distribution of runtime of movies by plotting the points againts their respective position in the ditribution

Coming to our first plot i.e. box-plot, It gives us an overall idea of how spreaded the ditribution is in case of runtime of the movies. we also get the outliners her if you carefully observe the plot.

By looking at both the plot and calculations, we can conclude that..

25% of movies have a runtime of less than 95 minutes
50% of movies have a runtime of less than 109 minutes. (median)
75% of movies have a runtime of less than 119 minutes
Research Question 6 : Year of release vs Profitability
In [26]:
#We will be using Line plot for this analysis
#Since we want to know the profits of movies for every year therefore we have to sum up all the movies of a particular year

profits_year = tmdb_data.groupby('release_year')['profit_earned'].sum()

#figure size(width, height)
plt.figure(figsize=(12,6), dpi = 130)

#on x-axis
plt.xlabel('Release Year of Movies in the data set', fontsize = 12)
#on y-axis
plt.ylabel('Profits earned by Movies', fontsize = 12)
#title of the line plot
plt.title('Representing Total Profits earned by all movies Vs Year of their release.')

#plotting the graph
plt.plot(profits_year)

#displaying the line plot
plt.show()

In [27]:
#To find that which year made the highest profit?
profits_year.idxmax()
Out[27]:
2015
So we can conclude both graphically as well as by calculations that year 2015 was the year where movies made the highest profit.

We are now done with analysing the given dataset.We will now find characteristics of profitable movies.

With respect to the profitable movies
Before moving further we need to clean our data again. We will be considering only those movies who have earned a significant amount of profit.

So lets fix this amount to 50 million dollar.

In [54]:
#selecting the movies having profit $50M or more
profit_data = tmdb_data[tmdb_data['profit_earned'] >= 50000000]

#reindexing new data
profit_data.index = range(len(profit_data))

#we will start from 1 instead of 0
profit_data.index = profit_data.index + 1

#printing the changed dataset
profit_data.head(3)
Out[54]:
budget	revenue	profit_earned	original_title	cast	director	tagline	runtime	genres	release_date	release_year
1	150000000	1513528810	1363528810	Jurassic World	Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...	Colin Trevorrow	The park is open.	124	Action|Adventure|Science Fiction|Thriller	2015-06-09	2015
2	150000000	378436354	228436354	Mad Max: Fury Road	Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...	George Miller	What a Lovely Day.	120	Action|Adventure|Science Fiction|Thriller	2015-05-13	2015
3	110000000	295238201	185238201	Insurgent	Shailene Woodley|Theo James|Kate Winslet|Ansel...	Robert Schwentke	One Choice Can Destroy You	119	Adventure|Science Fiction|Thriller	2015-03-18	2015
In [55]:
#counting the no.of rows in the new data base
len(profit_data)
Out[55]:
1338
So our dataset is reduced to 1338 from 3853 (in earlier case)

Research Question 6 : Succesful Genres
In [66]:
#function which will take any column as argument from and keep its track 
def data(column):
    #will take a column, and separate the string by '|'
    data = profit_data[column].str.cat(sep = '|')
    
    #giving pandas series and storing the values separately
    data = pd.Series(data.split('|'))
    
    #arranging in descending order
    count = data.value_counts(ascending = False)
    
    return count
In [67]:
#variable to store the retured value
count = data('genres')
#printing top 5 values
count.head()
Out[67]:
Comedy       492
Drama        481
Action       464
Thriller     405
Adventure    379
dtype: int64
Lets to a graphical analysis of the above collected data.

In [89]:
#lets plot the points in descending order top to bottom as we have data in same format.
count.sort_values(ascending = True, inplace = True)

#ploting
lt = count.plot.barh(color = '#00FF00', fontsize = 13)

#title
lt.set(title = 'Frequent Used Genres in Profitable Movies')

# on x axis
lt.set_xlabel('Nos.of Movies in the dataset', color = 'black', fontsize = '13')

#figure size(width, height)
lt.figure.set_size_inches(12, 9)

#ploting the graph
plt.show()

Research Question 7 : Most Frequent Cast
We will call the same function data(column) again for this analysis.

In [90]:
#variable to store the retured value
count = data('cast')
#printing top 5 values
count.head()
Out[90]:
Tom Cruise            27
Brad Pitt             25
Tom Hanks             22
Sylvester Stallone    21
Cameron Diaz          20
dtype: int64
As expecteted Tom Cruise is on the top with total 27 cast followed by Brad Pitt with 25 and Tom Hanks with 22.

Research Question 8 : Average Budget of the movies
In [56]:
#New function to find average 
def profit_avg(column):
    return profit_data[column].mean()
In [58]:
# calling the above function for budget
profit_avg('budget')
Out[58]:
60444957.76083707
So the movies having profit of 50 million dollar and more have an average budget of 60 million dollar.

Research Question 9 : Average Revenue earned by the movies
In [59]:
# calling the above function for revenue
profit_avg('revenue')
Out[59]:
254957662.59491777
So the movies having profit of 50 million dollar and more have an average revenue of 255 million dollar.

Research Question 10 : Average duration of the movies
In [60]:
# calling the above function for 
profit_avg('runtime')
Out[60]:
113.66741405082212
So the movies having profit of 50 million dollar and more have an average duration of 113 minutes.


Conclusions
This was a very interesting data analysis. We came out with some very interesting facts about movies. After this analysis we can conclude following:

For a Movie to be in successful criteria

Average Budget must be around 60 millon dollar
Average duration of the movie must be 113 minutes
Any one of these should be in the cast :Tom Cruise, Brad Pitt, Tom Hanks, Sylvester Stallone,Cameron Diaz
Genre must be : Action, Adventure, Thriller, Comedy, Drama.
By doing all this the movie might be one of the hits and hence can earn an average revenue of around 255 million dollar.

Limitations: This analysis was done considering the movies which had a significant amount of profit of around 50 million dollar. This might not be completely error free but by following these suggestion one can increase the probability of a movie to become a hit. Moreover we are not sure if the data provided to us is completel corect and up-to-date. As mentioned before the budget and revenue column do not have currency unit, it might be possible different movies have budget in different currency according to the country they are produce in. So a disparity arises here which can state the complete analysis wrong. Dropping the rows with missing values also affected the overall analysis.
